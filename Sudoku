#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define N 9

void imprimirTablero(int tablero[N][N]) {
    for (int i = 0; i < N; i++) {
        if (i % 3 == 0 && i != 0) {
            printf("--------------------------------\n");
        }
        for (int j = 0; j < N; j++) {
            if (j % 3 == 0 && j != 0) {
                printf(" |");
            }
            printf(" %2d", tablero[i][j]);
        }
        printf("\n");
    }
}

int esValido(int tablero[N][N], int fila, int columna, int numero) {
    int inicioFila = fila - fila % 3, inicioColumna = columna - columna % 3;
    for (int i = 0; i < N; i++) {
        if (tablero[fila][i] == numero || tablero[i][columna] == numero || 
            tablero[inicioFila + i / 3][inicioColumna + i % 3] == numero) {
            return 0;
        }
    }
    return 1;
}

int resolverSudoku(int tablero[N][N]) {
    for (int fila = 0; fila < N; fila++) {
        for (int columna = 0; columna < N; columna++) {
            if (tablero[fila][columna] == 0) {
                int numeros[N] = {1, 2, 3, 4, 5, 6, 7, 8, 9};
                // Barajar los números
                for (int i = N-1; i > 0; i--) {
                    int j = rand() % (i + 1);
                    int temp = numeros[i];
                    numeros[i] = numeros[j];
                    numeros[j] = temp;
                }
                for (int k = 0; k < N; k++) {
                    if (esValido(tablero, fila, columna, numeros[k])) {
                        tablero[fila][columna] = numeros[k];
                        if (resolverSudoku(tablero)) {
                            return 1;
                        }
                        tablero[fila][columna] = 0;
                    }
                }
                return 0;
            }
        }
    }
    return 1;
}

void crearTablero(int tablero[N][N]) {
    // Inicializar el tablero con ceros
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            tablero[i][j] = 0;
        }
    }

    // Generar un tablero completo y válido usando backtracking
    resolverSudoku(tablero);

    // Remover números aleatoriamente para crear espacios vacíos
    srand(time(NULL));
    int ceros = 40 + rand() % 11; // Remover entre 40 y 50 números aleatoriamente
    for (int i = 0; i < ceros; i++) {
        int fila = rand() % N;
        int columna = rand() % N;
        while (tablero[fila][columna] == 0) {
            fila = rand() % N;
            columna = rand() % N;
        }
        tablero[fila][columna] = 0;
    }
}

int tableroCompleto(int tablero[N][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            if (tablero[i][j] == 0) {
                return 0;
            }
        }
    }
    return 1;
}

int main() {
    int tablero[N][N] = {0};
    crearTablero(tablero);
    printf("Tablero inicial:\n");
    imprimirTablero(tablero);

    int intentos = 3;
    int fila, columna, numero;

    while (tableroCompleto(tablero) == 0) {
        printf("Ingrese fila (1-9), columna (1-9) y número (1-9): ");
        scanf("%d %d %d", &fila, &columna, &numero);

        if (fila < 1 || fila > 9 || columna < 1 || columna > 9 || numero < 1 || numero > 9) {
            printf("Ingrese números válidos\n");
            puts("Introduzca valores: ");
            scanf("%d %d %d", &fila, &columna, &numero);
        }

        fila--; 
        columna--;

        if (tablero[fila][columna] == 0 && esValido(tablero, fila, columna, numero)) {
            tablero[fila][columna] = numero;
            printf("\nMovimiento válido. Tablero actual:\n");
            imprimirTablero(tablero);
        } else {
            printf("\nMovimiento inválido. Intente de nuevo.\n");
            intentos--;
        }

        if (intentos == 0) {
            printf("Perdiste. Se acabaron los intentos.\n");
            return 0;
        }
    }

    printf("\n¡Felicidades completaste el Sudoku!\n");
    return 0;
}
